// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mediator

import (
	"context"
	"sync"
)

// Ensure, that MediatorMock does implement Mediator.
// If this is not the case, regenerate this file with moq.
var _ Mediator = &MediatorMock{}

// MediatorMock is a mock implementation of Mediator.
//
//	func TestSomethingThatUsesMediator(t *testing.T) {
//
//		// make and configure a mocked Mediator
//		mockedMediator := &MediatorMock{
//			PublishFunc: func(message Message)  {
//				panic("mock out the Publish method")
//			},
//			RegisterFunc: func(subscriber Subscriber)  {
//				panic("mock out the Register method")
//			},
//			StartFunc: func(ctx context.Context)  {
//				panic("mock out the Start method")
//			},
//			SubscriberCountFunc: func() int {
//				panic("mock out the SubscriberCount method")
//			},
//			UnregisterFunc: func(subscriber Subscriber)  {
//				panic("mock out the Unregister method")
//			},
//		}
//
//		// use mockedMediator in code that requires Mediator
//		// and then make assertions.
//
//	}
type MediatorMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(message Message)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(subscriber Subscriber)

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context)

	// SubscriberCountFunc mocks the SubscriberCount method.
	SubscriberCountFunc func() int

	// UnregisterFunc mocks the Unregister method.
	UnregisterFunc func(subscriber Subscriber)

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Message is the message argument value.
			Message Message
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Subscriber is the subscriber argument value.
			Subscriber Subscriber
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SubscriberCount holds details about calls to the SubscriberCount method.
		SubscriberCount []struct {
		}
		// Unregister holds details about calls to the Unregister method.
		Unregister []struct {
			// Subscriber is the subscriber argument value.
			Subscriber Subscriber
		}
	}
	lockPublish         sync.RWMutex
	lockRegister        sync.RWMutex
	lockStart           sync.RWMutex
	lockSubscriberCount sync.RWMutex
	lockUnregister      sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *MediatorMock) Publish(message Message) {
	if mock.PublishFunc == nil {
		panic("MediatorMock.PublishFunc: method is nil but Mediator.Publish was just called")
	}
	callInfo := struct {
		Message Message
	}{
		Message: message,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	mock.PublishFunc(message)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedMediator.PublishCalls())
func (mock *MediatorMock) PublishCalls() []struct {
	Message Message
} {
	var calls []struct {
		Message Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *MediatorMock) Register(subscriber Subscriber) {
	if mock.RegisterFunc == nil {
		panic("MediatorMock.RegisterFunc: method is nil but Mediator.Register was just called")
	}
	callInfo := struct {
		Subscriber Subscriber
	}{
		Subscriber: subscriber,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	mock.RegisterFunc(subscriber)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedMediator.RegisterCalls())
func (mock *MediatorMock) RegisterCalls() []struct {
	Subscriber Subscriber
} {
	var calls []struct {
		Subscriber Subscriber
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MediatorMock) Start(ctx context.Context) {
	if mock.StartFunc == nil {
		panic("MediatorMock.StartFunc: method is nil but Mediator.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedMediator.StartCalls())
func (mock *MediatorMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// SubscriberCount calls SubscriberCountFunc.
func (mock *MediatorMock) SubscriberCount() int {
	if mock.SubscriberCountFunc == nil {
		panic("MediatorMock.SubscriberCountFunc: method is nil but Mediator.SubscriberCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSubscriberCount.Lock()
	mock.calls.SubscriberCount = append(mock.calls.SubscriberCount, callInfo)
	mock.lockSubscriberCount.Unlock()
	return mock.SubscriberCountFunc()
}

// SubscriberCountCalls gets all the calls that were made to SubscriberCount.
// Check the length with:
//
//	len(mockedMediator.SubscriberCountCalls())
func (mock *MediatorMock) SubscriberCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSubscriberCount.RLock()
	calls = mock.calls.SubscriberCount
	mock.lockSubscriberCount.RUnlock()
	return calls
}

// Unregister calls UnregisterFunc.
func (mock *MediatorMock) Unregister(subscriber Subscriber) {
	if mock.UnregisterFunc == nil {
		panic("MediatorMock.UnregisterFunc: method is nil but Mediator.Unregister was just called")
	}
	callInfo := struct {
		Subscriber Subscriber
	}{
		Subscriber: subscriber,
	}
	mock.lockUnregister.Lock()
	mock.calls.Unregister = append(mock.calls.Unregister, callInfo)
	mock.lockUnregister.Unlock()
	mock.UnregisterFunc(subscriber)
}

// UnregisterCalls gets all the calls that were made to Unregister.
// Check the length with:
//
//	len(mockedMediator.UnregisterCalls())
func (mock *MediatorMock) UnregisterCalls() []struct {
	Subscriber Subscriber
} {
	var calls []struct {
		Subscriber Subscriber
	}
	mock.lockUnregister.RLock()
	calls = mock.calls.Unregister
	mock.lockUnregister.RUnlock()
	return calls
}
